import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Plot from 'react-plotly.js';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { Button } from '@/components/ui/button';

const InsightsPanel = () => {
  const [filters, setFilters] = useState({
    source_system: '',
    time_range: '1 year',
    product: 'All',
    brand: 'All',
    state: 'All',
    country: 'All'
  });
  const [filterOptions, setFilterOptions] = useState({});
  const [data, setData] = useState({});
  const [canFetchAnalytics, setCanFetchAnalytics] = useState(false);

  const handleChange = (field, value) => {
    setFilters(prev => ({ ...prev, [field]: value }));
    if (field !== 'source_system') setCanFetchAnalytics(false);
  };

  const clearFilters = () => {
    setFilters(prev => ({
      ...prev,
      time_range: '1 year',
      product: 'All',
      brand: 'All',
      state: 'All',
      country: 'All'
    }));
    setCanFetchAnalytics(false);
  };

  useEffect(() => {
    if (filters.source_system) {
      axios.get(`http://localhost:5000/api/filters?source_system=${filters.source_system}`)
        .then(res => setFilterOptions(res.data))
        .catch(err => console.error('Error loading filters', err));
    }
  }, [filters.source_system]);

  const fetchAnalytics = () => {
    axios.post('http://localhost:5000/api/analytics', filters)
      .then(res => setData(res.data))
      .catch(err => console.error('Error loading analytics data', err));
  };

  const renderChart = (title, chartData, xKey) => {
    const data1 = chartData.map(d => ({ x: d[xKey], y: d.Total_orders }));
    const data2 = chartData.map(d => ({ x: d[xKey], y: d.MRC_sum / 1_000_000, customdata: d.MRC_sum }));

    return (
      <Plot
        data={[
          {
            type: 'bar',
            name: 'Total Orders',
            x: data1.map(p => p.x),
            y: data1.map(p => p.y),
            marker: { color: '#1f77b4' },
            yaxis: 'y1',
            hovertemplate: 'Orders: %{y}<extra></extra>'
          },
          {
            type: 'bar',
            name: 'Revenue ($M)',
            x: data2.map(p => p.x),
            y: data2.map(p => p.y),
            customdata: data2.map(p => p.customdata),
            marker: { color: '#2ca02c' },
            yaxis: 'y2',
            hovertemplate: 'Revenue: $%{customdata:,.0f}<extra></extra>'
          }
        ]}
        layout={{
          title,
          barmode: 'group',
          height: 600,
          xaxis: { title: xKey, tickangle: -30 },
          yaxis: { title: 'Total Orders', side: 'left' },
          yaxis2: { title: 'Revenue ($M)', overlaying: 'y', side: 'right' }
        }}
        useResizeHandler
        style={{ width: '100%' }}
      />
    );
  };

  const renderTrendChart = () => {
    const df = data.trend_data || [];
    const x = df.map(p => p.CREATED_MONTH);
    return (
      <Plot
        data={[
          {
            x,
            y: df.map(p => p.Total_orders),
            type: 'scatter',
            mode: 'lines+markers',
            name: 'Total Orders',
            line: { color: '#1f77b4' },
            yaxis: 'y1',
            hovertemplate: 'Orders: %{y}<br>Date: %{x}<extra></extra>'
          },
          {
            x,
            y: df.map(p => p.MRC_sum / 1_000_000),
            type: 'scatter',
            mode: 'lines+markers',
            name: 'Revenue ($M)',
            line: { color: '#2ca02c', dash: 'dash' },
            yaxis: 'y2',
            hovertemplate: 'Revenue: $%{y:.2f}M<br>Date: %{x}<extra></extra>'
          }
        ]}
        layout={{
          title: 'Monthly Trend: Orders vs Revenue',
          xaxis: { title: 'Month' },
          yaxis: { title: 'Total Orders', side: 'left' },
          yaxis2: { title: 'Revenue ($M)', overlaying: 'y', side: 'right' },
          height: 600
        }}
        useResizeHandler
        style={{ width: '100%' }}
      />
    );
  };

  return (
    <div className="p-6">
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-6">
        <Select onValueChange={v => handleChange('source_system', v)} value={filters.source_system}>
          <SelectTrigger><SelectValue placeholder="Source System" /></SelectTrigger>
          <SelectContent>
            {['sdp', 'orion', 'eon'].map(k => <SelectItem key={k} value={k}>{k.toUpperCase()}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={v => handleChange('time_range', v)} value={filters.time_range}>
          <SelectTrigger><SelectValue placeholder="Time Range" /></SelectTrigger>
          <SelectContent>
            {['6 months', '1 year', '2 years', 'All'].map(k => <SelectItem key={k} value={k}>{k}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={v => handleChange('product', v)} value={filters.product}>
          <SelectTrigger><SelectValue placeholder="Product" /></SelectTrigger>
          <SelectContent>
            {['All'].concat(filterOptions.products || []).map(k => <SelectItem key={k} value={k}>{k}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={v => handleChange('brand', v)} value={filters.brand}>
          <SelectTrigger><SelectValue placeholder="Brand" /></SelectTrigger>
          <SelectContent>
            {['All'].concat(filterOptions.brands || []).map(k => <SelectItem key={k} value={k}>{k}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={v => handleChange('state', v)} value={filters.state}>
          <SelectTrigger><SelectValue placeholder="State" /></SelectTrigger>
          <SelectContent>
            {['All'].concat(filterOptions.states || []).map(k => <SelectItem key={k} value={k}>{k}</SelectItem>)}
          </SelectContent>
        </Select>
        <Select onValueChange={v => handleChange('country', v)} value={filters.country}>
          <SelectTrigger><SelectValue placeholder="Country" /></SelectTrigger>
          <SelectContent>
            {['All'].concat(filterOptions.countries || []).map(k => <SelectItem key={k} value={k}>{k}</SelectItem>)}
          </SelectContent>
        </Select>
      </div>

      <div className="flex gap-4 mb-6">
        <Button onClick={() => setCanFetchAnalytics(true)}>Apply Filters</Button>
        <Button variant="outline" onClick={clearFilters}>Clear Filters</Button>
      </div>

      {canFetchAnalytics && (
        <div>
          <Tabs defaultValue="location" className="w-full">
            <TabsList>
              <TabsTrigger value="location">Location Wise</TabsTrigger>
              <TabsTrigger value="product">Product Wise</TabsTrigger>
              <TabsTrigger value="brand">Brand Wise</TabsTrigger>
              <TabsTrigger value="trend">Trend Analysis</TabsTrigger>
            </TabsList>

            <TabsContent value="location">
              {data.location_summary && renderChart("Orders & Revenue by State", data.location_summary, 'STATE_NAME')}
            </TabsContent>
            <TabsContent value="product">
              {data.product_summary && renderChart("All Products Performance", data.product_summary, 'PRODUCT')}
            </TabsContent>
            <TabsContent value="brand">
              {data.brand_summary && renderChart("All Brands Performance", data.brand_summary, 'BRAND')}
            </TabsContent>
            <TabsContent value="trend">
              {data.trend_data && renderTrendChart()}
            </TabsContent>
          </Tabs>
        </div>
      )}
    </div>
  );
};

export default InsightsPanel;
