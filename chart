def process_question(question: str, selected_dbs: List[str]) -> Dict[str, Any]:
    all_results = []

    for db_key in selected_dbs:
        try:
            resource = DB_RESOURCES[db_key]
            embed_model = resource["embed_model"]
            faiss_index = resource["faiss_index"]
            metadata = resource["metadata"]
            rev_fk_map = resource["rev_fk_map"]
            db_uri = resource["db_uri"]

            # 1. Semantic search
            idxs = semantic_search(question, embed_model, faiss_index, TOP_K)
            tables = expand_with_related(idxs, metadata, rev_fk_map)
            schema_text = build_schema_snippet(tables, metadata)

            # 2. Prompt creation
            prompt = PROMPT_TEMPLATE.format(
                question=question,
                schema=schema_text,
                dialect=DIALECT
            )

            # 3. SQL generation
            gen_output = generate_sql_with_gemini(prompt)
            final_sql = gen_output.strip().lstrip("```sql").rstrip("```").strip()

            # 4. SQL execution
            engine = create_engine(db_uri)
            try:
                with engine.connect() as conn:
                    rows = [dict(r._mapping) for r in conn.execute(text(final_sql)).fetchall()]
            except Exception as db_err:
                print(f"[{db_key}] SQL error, retrying: {db_err}")
                corrected_sql = retry_sql_with_error_context(
                    question, schema_text, final_sql, str(db_err), DIALECT
                )
                with engine.connect() as conn:
                    rows = [dict(r._mapping) for r in conn.execute(text(corrected_sql)).fetchall()]
                final_sql = corrected_sql

            all_results.append({
                "db": db_key,
                "sql": final_sql,
                "results": rows,
                "schema": schema_text
            })

        except Exception as e:
            all_results.append({
                "db": db_key,
                "sql": None,
                "results": [],
                "error": str(e)
            })

    # Single DB path
    if len(selected_dbs) == 1:
        result = all_results[0]
        if result.get("sql") and result.get("results"):
            df = pd.DataFrame(result["results"])
            chart_config = generate_chart_suggestions_singledb(
                question, result["schema"], result["sql"]
            )
            figures = plot_charts_from_config_singledb(df, chart_config)
            figures_json = [fig.to_json() for fig in figures]
        else:
            figures_json = []

        return {
            "sql_queries": {result["db"]: result["sql"]},
            "db_results": {result["db"]: result["results"]},
            "charts": figures_json
        }

    # Multi-DB path
    else:
        sql_by_db = {res["db"]: res["sql"] for res in all_results if res.get("sql")}
        print(f"sql_by_db {sql_by_db}")
        print(f"all_results {all_results}")

        chart_config = generate_chart_suggestions(question, all_results)
        print(f"chart_config {chart_config}")

        merged_df = normalize_and_merge_results(all_results, chart_config)
        print(f"merged_df {merged_df}")

        figures = plot_charts_from_config(merged_df, chart_config)
        figures_json = [fig.to_json() for fig in figures]

        return {
            "sql_queries": {r["db"]: r["sql"] for r in all_results if r.get("sql")},
            "db_results": {r["db"]: r["results"] for r in all_results},
            "charts": figures_json
        }








import json
import requests
import pandas as pd

def generate_chart_suggestions_singledb(question: str, df: pd.DataFrame) -> dict:
    # Extract column names and data types
    column_types = {col: str(dtype) for col, dtype in df.dtypes.items()}
    column_str = "\n".join([f"- {col}: {dtype}" for col, dtype in column_types.items()])

    # Build the Gemini-compatible prompt
    prompt = f"""
You are a data visualization assistant.

Given the following user question and a DataFrame returned from a SQL query, suggest all suitable Plotly Express chart types to visualize the query results. For each chart, provide a JSON object with a "chart_type" matching a Plotly Express function name (e.g., "bar", "line", "scatter", "histogram", "box", "pie", etc.), and any relevant keyword arguments like "x", "y", "z", "color", "size", "dimensions", "names", "values", "path", etc.

Supported Plotly Express chart types: bar, line, scatter, histogram, box, pie, density_heatmap, area, funnel, treemap, sunburst, violin, scatter_3d, surface, parallel_coordinates, parallel_categories, choropleth, choropleth_mapbox.

### User Question:
{question}

### DataFrame Columns (name: type):
{column_str}

### Instructions:
- Use only the listed columns (do not invent column names)
- Base your suggestions on the column types: categorical vs numeric vs datetime
- Recommend all relevant charts based on the user question
- Output only a JSON object with a key "charts" containing a list of chart configs

### Response Format:
{{
  "charts": [
    {{ "chart_type": "bar", "x": "category", "y": "product_count" }},
    {{ "chart_type": "pie", "names": "category", "values": "product_count" }}
  ]
}}
"""

    # Send prompt to Gemini
    payload = {"contents": [{"parts": [{"text": prompt}]}]}
    headers = {"Content-Type": "application/json"}
    response = requests.post(GEMINI_URL, headers=headers, json=payload)
    response.raise_for_status()
    data = response.json()

    charts_json = None
    if "candidates" in data and data["candidates"]:
        candidate = data["candidates"][0]
        content = candidate.get("content")
        if isinstance(content, dict) and "parts" in content:
            charts_json = content["parts"][0].get("text")
        elif isinstance(content, str):
            charts_json = content

    if charts_json:
        try:
            return json.loads(charts_json)
        except json.JSONDecodeError:
            cleaned = charts_json.strip().strip("```json").strip("```")
            return json.loads(cleaned)

    return {"charts": []}

