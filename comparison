import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.metrics import r2_score, mean_absolute_error
from statsmodels.tsa.holtwinters import ExponentialSmoothing
from prophet import Prophet
import warnings

warnings.filterwarnings("ignore")

# Load the dataset
df = pd.read_excel("sorted_file.xlsx")
df['date'] = pd.to_datetime(df['date'])
df = df.sort_values(['product', 'date'])

# Get all unique products
product_list = df['product'].unique().tolist()
results = {}

# Run model comparisons for each product
for product in product_list:
    data = df[df['product'] == product][['date', 'total_orders']].copy()
    data.set_index('date', inplace=True)
    data = data.asfreq('D').fillna(0)

    if len(data) < 7:
        continue  # Skip short series

    X = np.arange(len(data)).reshape(-1, 1)
    y = data['total_orders'].values

    # Linear Regression
    lin_model = LinearRegression().fit(X, y)
    y_pred_lin = lin_model.predict(X)
    r2_lin = r2_score(y, y_pred_lin)
    mae_lin = mean_absolute_error(y, y_pred_lin)

    # Polynomial Regression (degree 2)
    poly = PolynomialFeatures(degree=2)
    X_poly = poly.fit_transform(X)
    poly_model = LinearRegression().fit(X_poly, y)
    y_pred_poly = poly_model.predict(X_poly)
    r2_poly = r2_score(y, y_pred_poly)
    mae_poly = mean_absolute_error(y, y_pred_poly)

    # Holt-Winters
    try:
        hw_model = ExponentialSmoothing(data['total_orders'], trend='add', seasonal=None).fit()
        y_pred_hw = hw_model.fittedvalues
        r2_hw = r2_score(y, y_pred_hw)
        mae_hw = mean_absolute_error(y, y_pred_hw)
    except:
        r2_hw, mae_hw = None, None

    # Prophet
    try:
        prophet_df = data.reset_index().rename(columns={'date': 'ds', 'total_orders': 'y'})
        prophet = Prophet(daily_seasonality=True)
        prophet.fit(prophet_df)
        future = prophet.make_future_dataframe(periods=0)
        forecast = prophet.predict(future)
        y_pred_prophet = forecast['yhat'].values
        r2_prophet = r2_score(y, y_pred_prophet)
        mae_prophet = mean_absolute_error(y, y_pred_prophet)
    except:
        r2_prophet, mae_prophet, y_pred_prophet = None, None, [None] * len(y)

    results[product] = {
        'actual': y,
        'linear': (y_pred_lin, r2_lin, mae_lin),
        'poly2': (y_pred_poly, r2_poly, mae_poly),
        'holt_winters': (y_pred_hw, r2_hw, mae_hw),
        'prophet': (y_pred_prophet, r2_prophet, mae_prophet),
        'dates': data.index
    }

# Plot results for each product
for product, res in results.items():
    fig, axs = plt.subplots(2, 2, figsize=(14, 10))
    fig.suptitle(f"Trend Model Comparison for '{product}'")

    models = ['linear', 'poly2', 'holt_winters', 'prophet']
    axes = axs.flatten()
    for i, model in enumerate(models):
        pred, r2, mae = res[model]
        if pred is None:
            axes[i].text(0.3, 0.5, f"{model} failed", fontsize=12)
            continue
        axes[i].plot(res['dates'], res['actual'], label='Actual', color='black')
        axes[i].plot(res['dates'], pred, label=model.replace('_', ' ').title(), linestyle='--')
        axes[i].set_title(f"{model.title()} | RÂ²: {r2:.2f}, MAE: {mae:.1f}")
        axes[i].legend()

    plt.tight_layout(rect=[0, 0, 1, 0.96])
    plt.show()
